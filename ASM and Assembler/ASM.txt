LDI R0, $0 #setup inicializa em 0
STA R0, .LEDS
STA R0, .LED8
STA R0, .LED9
STA R0, .HEX0
STA R0, .HEX1
STA R0, .HEX2
STA R0, .HEX3
STA R0, .HEX4
STA R0, .HEX5
STA R0, @0 #unidade
STA R0, @1 #dezena
STA R0, @2 #centena
STA R0, @3 #unidade de milhar
STA R0, @4 #dezena de milhar
STA R0, @5 #centena de milhar
STA R0, @6 #flag inibe contagem
STA R0, @15 #cte 0 para saber se botao esta solto
LDI R1, $1
STA R1, @13 #cte 1 para incrementar
LDI R2, $10
STA R2, @7 #limite unidade
STA R2, @8 #limite dezena
STA R2, @9 #limite centena
STA R2, @10 #limite unidade de milhar
STA R2, @11 #limite dezena de milhar
STA R2, @12 #limite centena de milhar
STA R2, @14 #cte 10 para verificar estouro
STA R2, .CK0 #limpa k0
STA R2, .CK1 #limpa k1

MAIN:
LDI R0, $0 #carrega zero
CEQ R0, .K0  #ve se k0 esta pressionado
JEQ .DEPOIS_DO_K0 #pula se estiver solto
JSR .INC #incrementa contagem
DEPOIS_DO_K0: 
JSR .ATUALIZA_DISPLAY #atualiza info da memoria no display
LDI R1, $0 #carrega zero
CEQ R1, .K1 #ve se k1 esta pressionado
JEQ .DEPOIS_DO_K1
JSR .ATUALIZA_LIMITE #atualiza limite da contagem
DEPOIS_DO_K1:
JSR .LIMITE #verifica limite da contagem
JMP .MAIN #volta para o inicio do laco


LIMITE:
LDA R0, @0 #carrega unidade
CEQ R0, @7 #compara com limite unidade
JEQ .CONTINUA_UNIDADE #pula se for igual ou retorna
RET 
CONTINUA_UNIDADE:
LDA R1, @1 #carrega dezena
CEQ R1, @8 #compara com limite dezena
JEQ .CONTINUA_DEZENA #pula se for igual ou retorna
RET
CONTINUA_DEZENA:
LDA R2, @2 #carrega centena
CEQ R2, @9 #compara com limite centena
JEQ .CONTINUA_CENTENA #pula se for igual ou retorna
RET
CONTINUA_CENTENA:
LDA R3, @3 #carrega unidade de milhar
CEQ R3, @10 #compara com limite unidade de milhar
JEQ .CONTINUA_U_MILHAR #pula se for igual ou retorna
RET
CONTINUA_U_MILHAR:
LDA R0, @4 #carrega dezena de milhar
CEQ R0, @11 #compara com limite dezena de milhar
JEQ .CONTINUA_D_MILHAR #pula se for igual ou retorna
RET
CONTINUA_D_MILHAR:
LDA R1, @5 #carrega centena de milhar
CEQ R1, @12 #compara com limite centena de milhar
JEQ .CONTINUA_C_MILHAR #pula se for igual ou retorna
RET
CONTINUA_C_MILHAR:
LDI R2, $1 #carrega 1 para ativar flag
STA R2, @6 #ativa flag inibe contagem
STA R2, .LED8 #ativa led limite atingido
RET #retorna


ATUALIZA_DISPLAY:
LDA R0, @0 #carrega unidade
STA R0, .HEX0 #armazena em hex0
LDA R1, @1 #carrega dezena
STA R1, .HEX1 #armazena em hex1
LDA R2, @2 #carrega centena
STA R2, .HEX2 #armazena em hex2
LDA R3, @3 #carrega unidade de milhar
STA R3, .HEX3 #armazena em hex3
LDA R0, @4 #carrega dezena de milhar
STA R0, .HEX4 #armazena em hex4
LDA R1, @5 #carrega centena de milhar
STA R1, .HEX5 #armazena em hex5
RET


INC:
STA R0, .CK0 #limpa K0
LDI R0, $0 #carrega zero
CEQ R0, @6 #compara com flag inibe contagem e retorna se for diferente de zero 
JEQ .FAZ_CONTAGEM 
RET
FAZ_CONTAGEM:
LDA R1, @0 #carrega unidade
SOMA R1, @13 #soma com um
STA R1, @0 #armazena unidade
CEQ R1, @14 #compara com 10 para verificar estouro
JEQ .CARRY_UN
RET
CARRY_UN:
LDI R1, $0 #carrega zero
STA R1, @0 #zera unidade
LDA R1, @1 #carrega dezena
SOMA R1, @13 #incrementa
STA R1, @1 #armazena dezena
CEQ R1, @14 #compara com 10 para verificar estouro
JEQ .CARRY_D
RET
CARRY_D:
LDI R2, $0 #carrega zero
STA R2, @1 #zera dezena
LDA R2, @2 #carrega centena
SOMA R2, @13 #incrementa
STA R2, @2 #armazena centena
CEQ R2, @14 #compara com 10 para verificar estouro
JEQ .CARRY_C
RET
CARRY_C:
LDI R3, $0 #carrega zero
STA R3, @2 #zera centena
LDA R3, @3 #carrega unidade de milhar
SOMA R3, @13 #incrementa
STA R3, @3 #armazena unidade de milhar
CEQ R3, @14 #compara com 10 para verificar estouro
JEQ .CARRY_U_MILHAR
RET
CARRY_U_MILHAR:
LDI R0, $0 #carrega zero
STA R0, @3 #zera unidade de milhar
LDA R0, @4 #carrega dezena de milhar
SOMA R0, @13 #incrementa
STA R0, @4 #armazena dezena de milhar
CEQ R0, @14 #compara com 10 para verificar estouro
JEQ .CARRY_D_MILHAR
RET
CARRY_D_MILHAR:
LDI R1, $0 #carrega zero
STA R1, @4 #zera dezena de milhar
LDA R1, @5 #carrega centena de milhar
SOMA R1, @13 #incrementa
STA R1, @5 #armazena centena de milhar
CEQ R1, @14 #compara com 10 para verificar estouro
JEQ .CARRY_C_MILHAR
RET
CARRY_C_MILHAR:
LDI R2, $0 #carrega zero
STA R2, @5 #zera centena de milhar
LDI R2, $1 #carrega um
STA R2, .LED9 #acende led de estouro
RET


ATUALIZA_LIMITE:
LDI R0, $1 #carrega um
STA R0, .LEDS #ativa led0 pra indicar unidade
LDI R0, $0 #carrega zero
STA R0, .LED8 #limpa led limite
STA R0, @6 #limpa flag inibe contagem
STA R0, .CK1 #limpa k1
ESPERA_UN:
LDA R1, .K1 #carrega k1
CEQ R1, @15 #compara com zero para saber se esta pressionado
JEQ .ESPERA_UN
LDA R1, .SWS #carrega chaves
STA R1, @7 #armazena em limite unidades
STA R1, .CK1 #limpa k1
LDI R1, $2 #carrega 2
STA R1, .LEDS #ativa led1
ESPERA_D:
LDA R2, .K1 #carrega k1
CEQ R2, @15 #compara com zero para saber se esta pressionado
JEQ .ESPERA_D
LDA R2, .SWS #carrega chaves
STA R2, @8 #armazena em limite dezena
STA R2, .CK1 #limpa k1
LDI R2, $4 #carrega 4
STA R2, .LEDS #ativa led2
ESPERA_C:
LDA R3, .K1 #carrega k1
CEQ R3, @15 #compara com zero para saber se esta pressionado
JEQ .ESPERA_C
LDA R3, .SWS #carrega chaves
STA R3, @9 #armazena em limite centena
STA R3, .CK1 #limpa k1
LDI R3, $8 #carrega 8
STA R3, .LEDS #ativa led3
ESPERA_U_MILHAR:
LDA R0, .K1 #carrega k1
CEQ R0, @15 #compara com zero para saber se esta pressionado
JEQ .ESPERA_U_MILHAR
LDA R0, .SWS #carrega chaves
STA R0, @10 #armazena em limite unidade de milhar
STA R0, .CK1 #limpa k1
LDI R0, $16 #carrega 16
STA R0, .LEDS #ativa led4
ESPERA_D_MILHAR:
LDA R1, .K1 #carrega k1
CEQ R1, @15 #compara com zero para saber se esta pressionado
JEQ .ESPERA_D_MILHAR
LDA R1, .SWS #carrega chaves
STA R1, @11 #armazena em limite dezena de milhar
STA R1, .CK1 #limpa k1
LDI R1, $32 #carrega 32
STA R1, .LEDS #ativa led5
ESPERA_C_MILHAR:
LDA R2, .K1 #carrega k1
CEQ R2, @15 #compara com zero para saber se esta pressionado
JEQ .ESPERA_C_MILHAR
LDA R2, .SWS #carrega chaves
STA R2, @12 #armazena em limite centena de milhar
STA R2, .CK1 #limpa k1
LDI R2, $0 #carrega 0
STA R2, .LEDS #desativa leds
RET