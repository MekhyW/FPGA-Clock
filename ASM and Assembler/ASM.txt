LDI R0, $0 #setup inicializa em 0
STA R0, .LEDS
STA R0, .LED8
STA R0, .LED9
STA R0, .HEX0
STA R0, .HEX1
STA R0, .HEX2
STA R0, .HEX3
STA R0, .HEX4
STA R0, .HEX5
STA R0, @0 #unidade de segundo
STA R0, @1 #dezena de segundo
STA R0, @2 #unidade de minuto
STA R0, @3 #dezena de minuto
STA R0, @4 #unidade de hora
STA R0, @5 #dezena de hora
STA R0, @6 #flag inibe contagem
STA R0, @15 #cte 0 para saber se botao esta solto
LDI R1, $1
STA R1, @13 #cte 1 para incrementar
STA R1, .TIME_DIV #base de tempo por padrao 1 seg
LDI R2, $10
STA R2, @14 #cte 10 para verificar estouro
STA R2, .CK0 #limpa k0
STA R2, .CK1 #limpa k1
STA R2, .CTIME #limpa tempo
LDI R3, $6
STA R3, @16 #cte 6 para verificar 60
LDI R3, $2
STA R3, @17 #cte 2 para verificar 24
LDI R3, $4
STA R3, @18 #cte 6 para verificar 24

MAIN:
LDI R0, $0 #carrega zero
CEQ R0, .TIME  #ve se passou segundo
JEQ .DEPOIS_DO_TIME #pula se estiver solto
JSR .INC #incrementa contagem
JSR .CHECA_60 #checa por carry de horario 
DEPOIS_DO_TIME: 
JSR .ATUALIZA_DISPLAY #atualiza info da memoria no display
LDI R1, $0 #carrega zero
CEQ R1, .K0 #ve se k0 esta pressionado
JEQ .DEPOIS_DO_K0
JSR .CONFIGURA_TEMPO #configura horario atual
DEPOIS_DO_K0:
LDI R2, $0 #carrega zero
CEQ R2, .K1 #ve se k0 esta pressionado
JEQ .DEPOIS_DO_K1
JSR .MUDA_BASE #muda base de tempo
DEPOIS_DO_K1:
JMP .MAIN #volta para o inicio do laco


ATUALIZA_DISPLAY:
LDA R0, @0 #carrega unidade
STA R0, .HEX0 #armazena em hex0
LDA R1, @1 #carrega dezena
STA R1, .HEX1 #armazena em hex1
LDA R2, @2 #carrega centena
STA R2, .HEX2 #armazena em hex2
LDA R3, @3 #carrega unidade de milhar
STA R3, .HEX3 #armazena em hex3
LDA R0, @4 #carrega dezena de milhar
STA R0, .HEX4 #armazena em hex4
LDA R1, @5 #carrega centena de milhar
STA R1, .HEX5 #armazena em hex5
RET


INC:
STA R0, .CTIME #limpa tempo
LDI R0, $0 #carrega zero
CEQ R0, @6 #compara com flag inibe contagem e retorna se for diferente de zero 
JEQ .FAZ_CONTAGEM 
RET
FAZ_CONTAGEM:
LDA R1, @0 #carrega unidade
SOMA R1, @13 #soma com um
STA R1, @0 #armazena unidade
JSR .VERIFICA_ESTOURO #verifica estouro
RET


VERIFICA_ESTOURO:
LDA R1, @0 #carrega unidade
CEQ R1, @14 #compara com 10 para verificar estouro
JEQ .CARRY_UN_S
RET
CARRY_UN_S:
LDI R1, $0 #carrega zero
STA R1, @0 #zera unidade seg
LDA R1, @1 #carrega dezena seg
SOMA R1, @13 #incrementa
STA R1, @1 #armazena dezena seg
CEQ R1, @14 #compara com 10 para verificar estouro
JEQ .CARRY_D_S
RET
CARRY_D_S:
LDI R2, $0 #carrega zero
STA R2, @1 #zera dezena seg
VERIFICA_ESTOURO_MINUTO:
LDA R2, @2 #carrega unidade min
SOMA R2, @13 #incrementa
STA R2, @2 #armazena unidade min
CEQ R2, @14 #compara com 10 para verificar estouro
JEQ .CARRY_UN_M
RET
CARRY_UN_M:
LDI R3, $0 #carrega zero
STA R3, @2 #zera unidade min
LDA R3, @3 #carrega dezena min
SOMA R3, @13 #incrementa
STA R3, @3 #armazena dezena min
CEQ R3, @14 #compara com 10 para verificar estouro
JEQ .CARRY_D_M
RET
CARRY_D_M:
LDI R0, $0 #carrega zero
STA R0, @3 #zera dezena min
VERIFICA_ESTOURO_HORA:
LDA R0, @4 #carrega unidade hora
SOMA R0, @13 #incrementa
STA R0, @4 #armazena unidade hora
CEQ R0, @14 #compara com 10 para verificar estouro
JEQ .CARRY_UN_H
RET
CARRY_UN_H:
LDI R1, $0 #carrega zero
STA R1, @4 #zera unidade hora
LDA R1, @5 #carrega dezena hora
SOMA R1, @13 #incrementa
STA R1, @5 #armazena dezena hora
CEQ R1, @14 #compara com 10 para verificar estouro
JEQ .CARRY_D_H
RET
CARRY_D_H:
LDI R2, $0 #carrega zero
STA R2, @5 #zera dezena hora
LDI R2, $1 #carrega um
STA R2, .LED9 #acende led de erro
RET


CONFIGURA_TEMPO:
LDI R0, $1 #carrega um
STA R0, .LEDS #ativa led0 pra indicar unidade segundo
LDI R0, $0 #carrega zero
STA R0, .CK0 #limpa k0
ESPERA_UN_S:
LDA R1, .K0 #carrega k0
CEQ R1, @15 #compara com zero para saber se esta pressionado
JEQ .ESPERA_UN_S
LDA R1, .SWS #carrega chaves
STA R1, @0 #armazena em unidade segundo
STA R1, .CK0 #limpa k0
LDI R1, $2 #carrega 2
STA R1, .LEDS #ativa led1
ESPERA_D_S:
LDA R2, .K0 #carrega k0
CEQ R2, @15 #compara com zero para saber se esta pressionado
JEQ .ESPERA_D_S
LDA R2, .SWS #carrega chaves
STA R2, @1 #armazena em dezena segundo
STA R2, .CK0 #limpa k0
LDI R2, $4 #carrega 4
STA R2, .LEDS #ativa led2
ESPERA_UN_M:
LDA R3, .K0 #carrega k0
CEQ R3, @15 #compara com zero para saber se esta pressionado
JEQ .ESPERA_UN_M
LDA R3, .SWS #carrega chaves
STA R3, @2 #armazena em unidade minuto
STA R3, .CK0 #limpa k0
LDI R3, $8 #carrega 8
STA R3, .LEDS #ativa led3
ESPERA_D_M:
LDA R0, .K0 #carrega k0
CEQ R0, @15 #compara com zero para saber se esta pressionado
JEQ .ESPERA_D_M
LDA R0, .SWS #carrega chaves
STA R0, @3 #armazena em dezena minuto
STA R0, .CK0 #limpa k0
LDI R0, $16 #carrega 16
STA R0, .LEDS #ativa led4
ESPERA_UN_H:
LDA R1, .K0 #carrega k0
CEQ R1, @15 #compara com zero para saber se esta pressionado
JEQ .ESPERA_UN_H
LDA R1, .SWS #carrega chaves
STA R1, @4 #armazena em unidade hora
STA R1, .CK0 #limpa k0
LDI R1, $32 #carrega 32
STA R1, .LEDS #ativa led5
ESPERA_D_H:
LDA R2, .K0 #carrega k0
CEQ R2, @15 #compara com zero para saber se esta pressionado
JEQ .ESPERA_D_H
LDA R2, .SWS #carrega chaves
STA R2, @5 #armazena em dezena hora
STA R2, .CK0 #limpa k0
LDI R2, $0 #carrega 0
STA R2, .LEDS #desativa leds
RET


CHECA_60:
LDA R0, @0 #carrega unidade de segundo
CEQ R0, @15 #compara com 0
JEQ .DEPOIS_0_SEG #desvia se unidade for 0 seg ou retorna
RET 
DEPOIS_0_SEG:
LDA R1, @1 #carrega dezena de segundo
CEQ R1, @16 #compara com 6
JEQ .MINUTO #desvia se dezena for 6 ou retorna
RET
MINUTO:
LDI R0, $0 #carrega zero 
STA R0, @0 #zera unidade segundo
STA R0, @1 #zera dezena segundo
JSR .VERIFICA_ESTOURO_MINUTO #soma 1 no minuto e confere estouro
LDA R0, @2 #carrega unidade minuto
CEQ R0, @15 #compara com 0
JEQ .DEPOIS_0_MIN #desvia se unidade for 0 min ou retorna
RET 
DEPOIS_0_MIN:
LDA R1, @3 #carrega dezena de minuto
CEQ R1, @16 #compara com 6
JEQ .HORA #desvia se dezena for 6 ou retorna
RET
HORA:
LDI R0, $0 #carrega zero 
STA R0, @2 #zera unidade min
STA R0, @3 #zera dezena min
JSR .VERIFICA_ESTOURO_HORA #soma 1 na hora e confere estouro
LDA R0, @4 #carrega unidade de hora
CEQ R0, @18 #compara com 4
JEQ .DEPOIS_4_HOR #desvia se unidade for 4 horas ou retorna
RET 
DEPOIS_4_HOR:
LDA R1, @5 #carrega dezena de hora
CEQ R1, @17 #compara com 2
JEQ .ZERA_HORA #desvia se dezena for 6 ou retorna
RET
ZERA_HORA:
LDI R0, $0 #carrega zero 
STA R0, @4 #zera unidade hora
STA R0, @5 #zera dezena hora
RET


MUDA_BASE:
STA R1, .CK1 #limpa k1
ESPERA:
LDA R2, .K1 #carrega k1
CEQ R2, @15 #compara com zero para saber se esta pressionado
JEQ .ESPERA
LDA R1, .SWS #carrega chaves
STA R1, .TIME_DIV #armazena o numero de vezes mais rapido que a base de tempo alternativa eh
STA R1, .CK1 #limpa k1
LDI R1, $100 #carrega 100
RET



